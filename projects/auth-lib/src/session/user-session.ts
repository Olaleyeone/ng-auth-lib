import { Injectable } from '@angular/core';
import { AccessTokenApiResponse, UserApiResponse } from 'auth-api-sdk';
import * as moment from 'moment';
import { BehaviorSubject, Observable } from 'rxjs';
import { filter } from 'rxjs/operators';
import { User } from '../model/user';
import { SessionService } from '../service/session-service';
import { RouteProtectionService } from '../service/route-protection-service';

@Injectable({
  providedIn: 'root'
})
export class UserSession {

  private _user: BehaviorSubject<User | null>;
  private userObservable: Observable<User>;

  private accessTokenApiResponse: AccessTokenApiResponse;

  public constructor(
    private routeProtectionService: RouteProtectionService,
    private sessionService: SessionService) {

    this._user = new BehaviorSubject<User>(undefined);
    this.userObservable = this._user.pipe(filter(it => it !== undefined));
  }

  isLoggedIn() {
    return !!this.accessTokenApiResponse;
  }

  hasActiveAccessToken() {
    if (!this.isLoggedIn()) {
      return false;
    }

    return moment().isBefore(moment(this.accessTokenApiResponse.expires_at));
  }

  setUser(accessTokenApiResponse: AccessTokenApiResponse) {
    this.accessTokenApiResponse = accessTokenApiResponse;
    // const phoneNumberData = accessTokenApiResponse.data.filter(it => it.key === 'phoneNumber');

    const user = {
      id: accessTokenApiResponse.id,
      displayName: accessTokenApiResponse.displayName,
      firstName: accessTokenApiResponse.firstName,
      lastName: accessTokenApiResponse.lastName,
      passwordAutoGenerated: accessTokenApiResponse.passwordAutoGenerated,
      emailAddress: accessTokenApiResponse.emailAddresses && accessTokenApiResponse.emailAddresses[0],
      // phoneNumber: phoneNumberData.length && phoneNumberData[0].value,
      data: accessTokenApiResponse.data
    };
    this._user.next(user);
    return user;
  }

  updateUser(userApiResponse: UserApiResponse) {

    const emailAddresses = userApiResponse.identifiers.filter(it => it.type === 'EMAIL');
    // const phoneNumberData = userApiResponse.data.filter(it => it.key === 'phoneNumber');

    this._user.next({
      id: userApiResponse.id,
      displayName: userApiResponse.displayName,
      firstName: userApiResponse.firstName,
      lastName: userApiResponse.lastName,
      passwordAutoGenerated: userApiResponse.passwordAutoGenerated,
      emailAddress: emailAddresses.length && emailAddresses[0].identifier,
      // phoneNumber: phoneNumberData.length && phoneNumberData[0].value,
      data: userApiResponse.data
    });
  }

  async clearStaleSession() {
    this._user.next(null);
    const accessTokenApiResponse = this.accessTokenApiResponse;
    this.accessTokenApiResponse = null;

    if (await this.routeProtectionService.currentRouteIsPublic()) {
      return;
    }
    this.handleExpiredSession(accessTokenApiResponse);
  }

  handleExpiredSession(accessTokenApiResponse: AccessTokenApiResponse) {
    this.sessionService.handleExpiredSession(accessTokenApiResponse);
  }

  get user() {
    return this.userObservable;
  }
}
