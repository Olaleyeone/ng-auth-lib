import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';
import { Observable, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { AuthenticationService } from '../service/authentication.service';
import { SessionService } from '../service/session-service';

@Injectable({
  providedIn: 'root'
})
export class ActiveUserGuard implements CanActivate {

  constructor(
    private router: Router,
    private authenticationService: AuthenticationService,
    private sessionService: SessionService) { }

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {

    const queryParams = {
      redirectTo: state.url
    };

    return this.authenticationService.getUser()
      .pipe(map((user => {
        if (!user) {

          // if (next.queryParams['targetUser']) {
          //   queryParams['targetUser'] = next.queryParams['targetUser'];
          // }
          // queryParams['hasGeneratedPassword'] = next.queryParams['hasGeneratedPassword'];

          // this.router.navigate(['/login'], { queryParams });

          this.sessionService.startSession(next, state);
          return false;
        }

        if (user.passwordAutoGenerated) {
          this.router.navigate(['/change-password'], { queryParams });
          return false;
        }

        return true;
      })))
      .pipe(catchError((err: any, caught: Observable<any>) => {
        // this.router.navigate(['/login'], { queryParams });
        this.sessionService.startSession(next, state);
        return of(false);
      }));
  }

}
