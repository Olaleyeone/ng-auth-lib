import { TestBed } from '@angular/core/testing';
import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { Observable, of, throwError } from 'rxjs';
import { User } from '../model/user';
import { AuthenticationService } from '../service/authentication.service';
import { ActiveUserGuard } from './active-user.guard';
import { SessionService } from '../service/session-service';


describe('ActiveUserGuard', () => {

    let guard: ActiveUserGuard;
    let router: Router;
    let authService: AuthenticationService;
    let routerStateSnapshot: RouterStateSnapshot;
    let sessionService: SessionService;

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [RouterTestingModule],
            providers: [
                {
                    provide: AuthenticationService,
                    useValue: {
                        getUser: () => {
                            return of(null);
                        }
                    } as any
                },
                {
                    provide: SessionService,
                    useValue: {
                        startSession: () => { }
                    } as any
                }
            ]
        });

        guard = TestBed.inject(ActiveUserGuard);
        authService = TestBed.inject(AuthenticationService);
        sessionService = TestBed.inject(SessionService);
        router = TestBed.get(Router);
        spyOn(router, 'navigate');
        routerStateSnapshot = { url: '/url' } as RouterStateSnapshot;

        spyOn(sessionService, 'startSession');
    });

    it('should be created', () => {
        expect(guard).toBeTruthy();
    });

    it('should not activate with error', () => {
        authService.getUser = () => {
            return throwError({});
        };
        const res = guard.canActivate(null, routerStateSnapshot);
        expect(res).toBeInstanceOf(Observable);
        (res as Observable<boolean>).subscribe(activate => {
            expect(activate).toBeFalse();
        });
        expect(sessionService.startSession).toHaveBeenCalledWith(null, routerStateSnapshot);
    });

    it('should not activate with falsy user', () => {
        const next = ({} as ActivatedRouteSnapshot);
        const res: Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree = guard.canActivate(next, routerStateSnapshot);
        expect(res).toBeInstanceOf(Observable);
        (res as Observable<boolean>).subscribe(activate => {
            expect(activate).toBeFalse();
        });
        expect(sessionService.startSession).toHaveBeenCalledWith(next, routerStateSnapshot);
    });

    it('should not activate with auto-generated password', () => {
        authService.getUser = () => {
            return of({ passwordAutoGenerated: true } as User);
        };
        const res: Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree = guard.canActivate({} as ActivatedRouteSnapshot, routerStateSnapshot);
        expect(res).toBeInstanceOf(Observable);
        (res as Observable<boolean>).subscribe(activate => {
            expect(activate).toBeFalse();
        });
        expect(router.navigate).toHaveBeenCalledWith(['/change-password'], jasmine.truthy());
    });

    it('should activate', () => {
        authService.getUser = () => {
            return of({} as User);
        };
        let activate;
        const res: Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree = guard.canActivate({ data: {} } as any, routerStateSnapshot);
        expect(res).toBeInstanceOf(Observable);
        (res as Observable<boolean>).subscribe(res => {
            activate = res;
        });
        expect(activate).toBeTrue();
    });

    // it('should activate', () => {
    //     authService.getUser = () => {
    //         return of({} as User);
    //     };
    //     const res: Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree = guard.canActivate({
    //         data: {
    //             permissions: ['test']
    //         }
    //     } as any, routerStateSnapshot);
    //     expect(res).toBeInstanceOf(Observable);
    //     (res as Observable<boolean>).subscribe(activate => {
    //         expect(activate).toBeTrue();
    //     });
    //     expect(router.navigate).not.toHaveBeenCalledWith(['/dashboard']);
    // });
});
